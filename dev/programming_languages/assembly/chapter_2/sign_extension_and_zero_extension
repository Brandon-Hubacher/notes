To sign extend a **signed** value from a certain number of bits to a greater number of bits, copy the sign bit into all the
additional bits.

 8 bits  ->     16 bits
10000000 -> 1111111110000000

You must use sign extension when manipulating signed values of varying lengths.

To extend an **unsigned** value to a larger one, you must zero-extend the value by prepending 0 in the HO <size> of the
larger operand.

 8 bits  ->     16 bits
10000000 -> 0000000010000000

Sign Contraction and Saturation
-------------------------------

Sign contraction is converting a value with a certain number of bits to the identical value with a fewer number of bits.

This is not always possible.
For example, as a 16-bit signed number, -448 is 0FE40h, the magnitude of which is too large to fit in an 8-bit number.

To properly sign-contract a value:
    1. the HO bytes to discard must all contain either 0 (all zeros) or 0FFh (all ones)
    2. and the HO bit of your resulting value must match *every* bit you've removed

Example 1::

    0FF80h              -> 80h
    1111_1111_1000_0000 -> 1000_0000

Example 2::

    0040h               -> 40h
    0000_0000_0100_0000 -> 0100_0000

Example 3::

    0FE40h cannot be sign-contracted 8 bits
    1111_1110_0100_0000

Example 4::

    0100h cannot be sign-contracted to 8 bits
    0000_0001_0000_0000


If you're willing to live with loss of precision, you can use saturation.

1. If the larger value fits in the size of the smaller size, you're good
2. Otherwise, you clip the value off just at the point where it'll fit

For example, when converting a 16-bit signed integer to an 8-bit signed integer, if the 16-bit value is in the range
-128 to +127, copy the LO byte of the 16-bit object to the 8-bit object. If the 16-bit value is greater than +127, then
you clip the value to +127 and store it in the 8-bit object. If the value is less than -128, clip the 8-bit object to
-128.
