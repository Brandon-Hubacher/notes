Need to store a multidimensional object into a one-dimensional memory space.

The actual mapping is not important as long as two things are satisfied:
1. Each element maps to its own memory location
2. A given element always maps to the same memory location

Row-Major Ordering
------------------

Across the rows and down the columns

     0  1  2  3
    ┌──┬──┬──┬──┐
  0 │00│01│02│03│
    ├──┼──┼──┼──┤
  1 │04│05│06│07│
    ├──┼──┼──┼──┤
  2 │08│09│10│11│
    ├──┼──┼──┼──┤
  3 │12│13│14│15│
    └──┴──┴──┴──┘


+--------+
|        |
+--------+
|        | 15 A[3, 3]
+--------+
|        | 14 A[3, 2]
+--------+
|        | 13 A[3, 1]
+--------+
|        | 12 A[3, 0]
+--------+
|        | 11 A[2, 3]
+--------+
|        | 10 A[2, 2]
+--------+
|        |  9 A[2, 1]
+--------+
|        |  8 A[2, 0]
+--------+
|        |  7 A[1, 3]
+--------+
|        |  6 A[1, 2]
+--------+
|        |  5 A[1, 1]
+--------+
|        |  4 A[1, 0]
+--------+
|        |  3 A[0, 3]
+--------+
|        |  2 A[0, 2]
+--------+
|        |  1 A[0, 1]
+--------+
|        |  0 A[0, 0]
+--------+
|        |
+--------+

Consider the following Pascal code::

    type
     OneD   = array[0..3] of char;   // Total size is 4 bytes
     TwoD   = array[0..3] of OneD;   // Total size is 4 * sizeof(OneD)   = 4 * 4  = 16 bytes
     ThreeD = array[0..3] of TwoD;   // Total size is 4 * sizeof(TwoD)   = 4 * 16 = 64 bytes
     FourD  = array[0..3] of ThreeD; // Total size is 4 * sizeof(ThreeD) = 4 * 64 = 256 bytes
    var
     A: array[0..3] of FourD;

The size of OneD is 4 bytes because it contains 4 elements of size byte.

To compute the address of A[b, c, d, e, f], you could do the following:
1. A[b]             = Base + (b * 256). This result will be ``Base`` in the next step.
2. A[b, c]          = Base + (c * 64).  This result will be ``Base`` in the next step.
3. A[b, c, d]       = Base + (d * 16).  This result will be ``Base`` in the next step.
4. A[b, c, d, e]    = Base + (e * 4).   This result will be ``Base`` in the next step.
5. A[b, c, d, e, f] = Base + (f * 1).

You can compute this in a single equation but it's easier to following multiple 1-dimensional steps.

Assembly language emphasizes the inefficiencies associated with accesses of higher-dimensional arrays and is one of the
main reasons you won't find them used often. It's easy to enter something like A[b, c, d, e, f] in a HLL without
realizing what the compiler is doing with the code.
Good assembly language programers try to avoid two-dimensional arays and often resort to tricks to access data in such
an array when its use becomes necessary.

Column-Major Ordering
---------------------


     0  1  2  3
    ┌──┬──┬──┬──┐
  0 │00│01│02│03│
    ├──┼──┼──┼──┤
  1 │04│05│06│07│
    ├──┼──┼──┼──┤
  2 │08│09│10│11│
    ├──┼──┼──┼──┤
  3 │12│13│14│15│
    └──┴──┴──┴──┘


+--------+
|        |
+--------+
|        | 15 A[3, 3]
+--------+
|        | 14 A[2, 3]
+--------+
|        | 13 A[1, 3]
+--------+
|        | 12 A[0, 3]
+--------+
|        | 11 A[3, 2]
+--------+
|        | 10 A[2, 2]
+--------+
|        |  9 A[1, 2]
+--------+
|        |  8 A[0, 2]
+--------+
|        |  7 A[3, 1]
+--------+
|        |  6 A[2, 1]
+--------+
|        |  5 A[1, 1]
+--------+
|        |  4 A[0, 1]
+--------+
|        |  3 A[3, 0]
+--------+
|        |  2 A[2, 0]
+--------+
|        |  1 A[1, 0]
+--------+
|        |  0 A[0, 0]
+--------+
|        |
+--------+

Allocating Storage For Multidimensional Arrays
----------------------------------------------

    array_name element_type size_1 * size_2 * size_3 * ... * size_n dup (?)

where size_1 to size_n are the sizes of the dimensions of the array. For example, a 4x4 array of characters:

    GameGrid byte 4 * 4 dup (?)

You can also use nested dup declarations.

    StateValue byte 256 dup (64 dup (0FFh))

Accessing Multidimensional Array Elements in Assembly Language
--------------------------------------------------------------

``mov``, ``shl``, and ``imul`` are helpful.

```
        .data
i       sdword  ?
j       sdword  ?
TwoD    sdword  4 dup (8 dup (?))

; To perform the operation TwoD[i,j] := 5;
; you'd use code like the following.
; Note that the array index computation is (i*8 + j)*4

        mov ebx, i   ; Remember, zero-extends into RBX
        shl rbx, 3   ; Multiple by 8
        add ebx, j   ; Also zero-extends the result into RBX
        mov TwoD[rbx*4], 5
```
