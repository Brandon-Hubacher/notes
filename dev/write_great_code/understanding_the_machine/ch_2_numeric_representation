2.1 What is a Number?
=====================

A number is an intangible, abstract concept. ``100`` is not a number, but the representation of the number one hundred. It may not be one hundred, but four, if it's binary. One hundred could also be represented in many different ways:
- 100:         Decimal
- C:           Roman numeral
- 64_16:       Base-16 (hexadecimal)
- 1100100_2:   Base-2 (binary)
- 144_8:       Base-8 (octal)
- one hundred: english

2.2 Numbering Systems
=====================

A numbering system is a mechanism we use to represent numeric values (like decimal or binary).
The decimal system uses positional notation, which gives meaning to both the symbol as well as the symbol in the sequence of symbols. The benefits of of this representation can be appreciated by constrasting it with the tally-slash representation, which uses a nonpositional system.

Pros of tally-slash
- easy to use for counting objects

Cons of tally-slash
- bulky, the space required to represent the value n is proporition to n
- arithmetic operations are difficult

2.2.2 Radix (Base) Values
-------------------------

The decimal numbering system is what humans are most familiar with and has a base - or radix - of 10. We multiply digits by successive powers of the base for each digit to the left of the radix point. The radix point for the familiar base 10 numbering system is called the decimal point.

As an example, let's work with the base-8 (octal) numbering system.
It uses 8 symbol (0 - 7).
It uses successive powers of 8.
Consider the number 123_8. This is (1 * 8^2) + (2 * 8^1) + (3 * 8^0) = 64 + 16 + 3 = 83_10

You can create a base-n numbering system with n unique digits.
For bases 2 through 10, the convention is to use the arabic digits 0 - (n - 1).
For bases greater than 9, the convention is to additionally include the alphabetic digits a through z (or A through Z ignoring case).
This supports numbering systems through base 36 (because there's 10 digits and 26 characters).
There is no convention for numbering systems with a base greater than 36.

Here are the bases you should be familiar with for software engineering:
base-2 (binary):      because it's the native representation that computers use
base-8 (octal):       because it's popular on older computers
base16 (hexadecimal): because it's more compact than binary

2.2.3 The Binary Numbering System
---------------------------------

Uses the symbols 0 and 1 and uses powers of 2

2.2.3.1 Converting Between Decimal and Binary Representations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

11001010_2

        (1 * 2^7) + (1 * 2^6) + (0 * 2^5) + (0 * 2^4) + (1 * 2^3) + (0 * 2^2) + (1 * 2^1) + (0 * 2^0)
                                            128 + 64 + 8 + 2
                                                  202_10


Algorithm:
1. If the number is even, emit a 0. If the number is odd, emit a 1
2. Divide the number by 2 and discard any fractional component
3. If the quotient is 0, the algorithm is complete
4. If the number is odd, insert a 1 before the current string, otherwise a 0.
5. Go back to step 2 and repeat

202_10

    
